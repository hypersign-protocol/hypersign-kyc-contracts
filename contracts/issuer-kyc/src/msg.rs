use cosmwasm_schema::{cw_serde, QueryResponses};
use cosmwasm_std::{to_binary, Addr, Coin, CosmosMsg, Empty, StdResult, WasmMsg};
use cw_storage_plus::Item;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use strum_macros::ToString;

#[cw_serde]
pub struct InstantiateMsg {
    // pub token_code_id: u64,
    pub did_doc: String,
    pub did_doc_proof: String,
    pub signature: String,
}

#[cw_serde]
#[derive(QueryResponses)]
pub enum QueryMsg {
    #[returns(ValueResp)]
    OwnerDID {},

    #[returns(SBTcontractAddressResp)]
    SBTContractAddress {},
}

#[cw_serde]
#[derive(ToString)]
pub enum HypersignKYCProofTypes {
    // supported
    #[strum(serialize = "zkProofOfPersonhood")]
    zkProofOfPersonhood,

    #[strum(serialize = "zkProofOfKYC")]
    zkProofOfKYC,

    #[strum(serialize = "zkProofOfAge")]
    zkProofOfAge,

    #[strum(serialize = "zkProofOfMembership")]
    zkProofOfMembership,
}

impl HypersignKYCProofTypes {
    // Method to get color of the proof type
    pub fn get_color(&self) -> &'static str {
        match self {
            HypersignKYCProofTypes::zkProofOfAge => "#ffc300", // red
            HypersignKYCProofTypes::zkProofOfKYC => "#58c686", // green
            HypersignKYCProofTypes::zkProofOfPersonhood => "#bb7af5", // blue
            HypersignKYCProofTypes::zkProofOfMembership => "#9bf1f5",
        }
    }

    pub fn get_sbt_code(&self) -> &'static str {
        match self {
            HypersignKYCProofTypes::zkProofOfAge => "T1",
            HypersignKYCProofTypes::zkProofOfKYC => "T2",
            HypersignKYCProofTypes::zkProofOfPersonhood => "T3",
            HypersignKYCProofTypes::zkProofOfMembership => "",
        }
    }

    pub fn get_decription(&self) -> &'static str {
        match self {
            HypersignKYCProofTypes::zkProofOfAge => "Proves user is above or below certain age",
            HypersignKYCProofTypes::zkProofOfKYC => "Proves that user has finished his/her KYC",
            HypersignKYCProofTypes::zkProofOfPersonhood => "Proves that user is not a bot",
            HypersignKYCProofTypes::zkProofOfMembership => {
                "Proves that user is member of whitelisted countries"
            }
        }
    }

    // TODO: need to add logo urls here.
    pub fn get_logo(&self) -> &'static str {
        match self {
            HypersignKYCProofTypes::zkProofOfAge => "",
            HypersignKYCProofTypes::zkProofOfKYC => "",
            HypersignKYCProofTypes::zkProofOfPersonhood => "",
            HypersignKYCProofTypes::zkProofOfMembership => "",
        }
    }

    pub fn get_ver_key(&self) -> &'static str {
        match self {
            HypersignKYCProofTypes::zkProofOfAge => {
                r#"{"alpha_1":[45,77,154,167,227,2,217,223,65,116,157,85,7,148,157,5,219,234,51,251,177,108,100,59,34,245,153,162,190,109,242,226,20,190,221,80,60,55,206,176,97,216,236,96,32,159,227,69,206,137,131,10,25,35,3,1,240,118,202,255,0,77,25,38],"beta_2":[9,103,3,47,203,247,118,209,175,201,133,248,136,119,241,130,211,132,128,166,83,242,222,202,169,121,76,188,59,243,6,12,14,24,120,71,173,76,121,131,116,208,214,115,43,245,1,132,125,214,139,192,224,113,36,30,2,19,188,127,193,61,183,171,48,76,251,209,224,138,112,74,153,245,232,71,217,63,140,60,170,253,222,196,107,122,13,55,157,166,154,77,17,35,70,167,23,57,193,177,164,87,168,199,49,49,35,210,77,47,145,146,248,150,183,198,62,234,5,169,213,127,6,84,122,208,206,200],"gamma_2":[25,142,147,147,146,13,72,58,114,96,191,183,49,251,93,37,241,170,73,51,53,169,231,18,151,228,133,183,174,243,18,194,24,0,222,239,18,31,30,118,66,106,0,102,94,92,68,121,103,67,34,212,247,94,218,221,70,222,189,92,217,146,246,237,9,6,137,208,88,95,240,117,236,158,153,173,105,12,51,149,188,75,49,51,112,179,142,243,85,172,218,220,209,34,151,91,18,200,94,165,219,140,109,235,74,171,113,128,141,203,64,143,227,209,231,105,12,67,211,123,76,230,204,1,102,250,125,170],"delta_2":[24,243,201,4,212,102,212,30,211,83,75,223,19,89,211,38,205,198,131,18,68,111,226,83,162,230,200,45,133,5,164,134,27,39,169,90,133,168,229,254,87,207,90,150,237,48,122,135,43,140,25,213,7,0,100,9,236,221,144,161,128,76,186,104,1,218,211,226,244,105,180,252,202,19,27,10,198,221,254,206,2,122,149,154,35,56,148,227,64,51,223,44,205,248,26,14,27,167,246,118,159,220,75,178,206,64,241,183,213,248,6,90,46,150,31,38,239,26,125,199,248,22,177,143,122,94,26,113],"ic":[[42,33,163,159,222,161,233,222,248,169,188,190,69,235,141,12,246,82,7,50,162,136,98,132,218,190,29,201,124,8,19,49,10,178,23,224,100,114,117,133,186,175,131,24,255,2,124,248,157,6,196,133,161,219,46,73,163,31,151,223,32,73,216,252],[42,220,171,59,187,106,61,209,220,92,104,68,206,142,146,37,111,52,39,154,119,86,237,185,104,206,106,171,224,22,51,119,40,150,230,210,227,82,242,89,130,28,46,131,152,62,187,74,17,136,65,101,55,66,204,117,184,128,50,119,36,98,185,146],[11,200,251,26,199,153,129,39,43,106,151,178,85,228,121,21,89,188,211,178,30,33,227,164,102,250,161,196,243,241,242,24,14,56,197,219,248,39,81,72,143,64,211,209,181,96,125,252,95,14,54,178,241,168,51,67,239,207,200,95,197,198,72,47],[44,217,209,28,119,121,97,168,29,113,204,5,20,24,44,65,196,137,208,44,247,214,154,154,142,12,220,124,75,21,249,185,8,98,193,184,115,106,75,203,100,73,66,111,246,74,147,69,228,65,115,147,74,105,99,179,95,104,152,145,192,226,161,62],[21,144,255,75,126,241,159,69,228,153,2,133,162,47,114,51,55,22,218,146,190,37,244,105,235,144,109,194,2,73,86,246,20,142,223,207,238,247,161,178,140,150,61,17,221,43,112,204,198,76,8,172,8,44,244,235,195,124,52,253,189,168,146,85],[39,95,217,205,201,186,207,151,163,40,52,50,234,195,199,22,118,76,80,127,49,102,240,150,36,199,99,219,219,3,89,64,32,189,69,226,44,152,228,88,68,190,192,214,26,200,241,141,126,121,156,146,29,78,45,174,104,176,33,57,128,76,201,44],[16,28,32,191,201,146,166,173,84,229,37,206,137,207,158,120,190,245,184,169,178,255,70,247,187,144,169,70,83,0,153,69,14,119,223,110,194,25,186,222,42,76,165,228,142,91,96,203,18,79,93,178,104,193,238,89,82,201,180,252,249,90,147,44]]}"#
            }
            HypersignKYCProofTypes::zkProofOfKYC => {
                r#"{"alpha_1":[45,77,154,167,227,2,217,223,65,116,157,85,7,148,157,5,219,234,51,251,177,108,100,59,34,245,153,162,190,109,242,226,20,190,221,80,60,55,206,176,97,216,236,96,32,159,227,69,206,137,131,10,25,35,3,1,240,118,202,255,0,77,25,38],"beta_2":[9,103,3,47,203,247,118,209,175,201,133,248,136,119,241,130,211,132,128,166,83,242,222,202,169,121,76,188,59,243,6,12,14,24,120,71,173,76,121,131,116,208,214,115,43,245,1,132,125,214,139,192,224,113,36,30,2,19,188,127,193,61,183,171,48,76,251,209,224,138,112,74,153,245,232,71,217,63,140,60,170,253,222,196,107,122,13,55,157,166,154,77,17,35,70,167,23,57,193,177,164,87,168,199,49,49,35,210,77,47,145,146,248,150,183,198,62,234,5,169,213,127,6,84,122,208,206,200],"gamma_2":[25,142,147,147,146,13,72,58,114,96,191,183,49,251,93,37,241,170,73,51,53,169,231,18,151,228,133,183,174,243,18,194,24,0,222,239,18,31,30,118,66,106,0,102,94,92,68,121,103,67,34,212,247,94,218,221,70,222,189,92,217,146,246,237,9,6,137,208,88,95,240,117,236,158,153,173,105,12,51,149,188,75,49,51,112,179,142,243,85,172,218,220,209,34,151,91,18,200,94,165,219,140,109,235,74,171,113,128,141,203,64,143,227,209,231,105,12,67,211,123,76,230,204,1,102,250,125,170],"delta_2":[30,31,233,255,246,113,211,17,190,49,237,110,132,180,108,88,252,188,44,56,221,55,4,2,7,250,180,161,189,32,177,11,40,123,101,6,28,183,38,102,161,84,161,37,90,0,167,6,143,52,55,103,108,196,190,174,42,92,40,116,237,39,145,52,1,144,90,203,13,166,99,117,33,37,75,65,89,185,129,136,139,123,158,179,242,154,229,255,132,67,205,40,224,104,226,46,26,14,244,204,161,21,231,204,36,36,118,67,160,10,188,41,153,71,106,127,212,245,133,217,182,13,209,150,65,123,97,70],"ic":[[6,60,88,74,149,229,25,39,105,0,39,72,70,194,100,54,92,242,107,221,117,185,82,94,227,46,107,43,202,61,159,116,40,199,220,31,197,255,195,55,95,179,58,71,0,187,251,204,154,64,51,40,107,174,147,162,175,54,20,195,178,243,112,101],[42,75,229,162,159,115,115,44,147,90,192,145,179,30,214,68,125,183,79,195,218,65,226,144,128,3,36,43,21,165,230,95,24,160,114,125,141,196,8,82,59,160,90,105,121,213,91,216,212,210,63,66,28,31,156,219,88,222,183,53,16,182,217,249],[36,200,190,158,167,206,66,58,187,166,116,44,94,232,116,124,37,80,200,103,53,55,109,6,28,70,208,119,117,30,115,100,4,38,166,131,128,187,110,82,46,14,223,106,151,227,186,103,183,96,144,151,113,230,6,65,78,186,110,47,70,17,148,122],[15,136,118,155,50,188,176,42,46,14,34,108,201,13,230,46,106,143,248,170,86,204,11,175,69,205,206,105,158,234,158,240,27,22,44,132,211,140,127,58,149,82,193,31,97,77,133,42,105,46,168,170,233,165,142,66,179,16,244,10,180,246,91,106]]}"#
            }
            HypersignKYCProofTypes::zkProofOfPersonhood => {
                r#"{"alpha_1":[45,77,154,167,227,2,217,223,65,116,157,85,7,148,157,5,219,234,51,251,177,108,100,59,34,245,153,162,190,109,242,226,20,190,221,80,60,55,206,176,97,216,236,96,32,159,227,69,206,137,131,10,25,35,3,1,240,118,202,255,0,77,25,38],"beta_2":[9,103,3,47,203,247,118,209,175,201,133,248,136,119,241,130,211,132,128,166,83,242,222,202,169,121,76,188,59,243,6,12,14,24,120,71,173,76,121,131,116,208,214,115,43,245,1,132,125,214,139,192,224,113,36,30,2,19,188,127,193,61,183,171,48,76,251,209,224,138,112,74,153,245,232,71,217,63,140,60,170,253,222,196,107,122,13,55,157,166,154,77,17,35,70,167,23,57,193,177,164,87,168,199,49,49,35,210,77,47,145,146,248,150,183,198,62,234,5,169,213,127,6,84,122,208,206,200],"gamma_2":[25,142,147,147,146,13,72,58,114,96,191,183,49,251,93,37,241,170,73,51,53,169,231,18,151,228,133,183,174,243,18,194,24,0,222,239,18,31,30,118,66,106,0,102,94,92,68,121,103,67,34,212,247,94,218,221,70,222,189,92,217,146,246,237,9,6,137,208,88,95,240,117,236,158,153,173,105,12,51,149,188,75,49,51,112,179,142,243,85,172,218,220,209,34,151,91,18,200,94,165,219,140,109,235,74,171,113,128,141,203,64,143,227,209,231,105,12,67,211,123,76,230,204,1,102,250,125,170],"delta_2":[34,151,67,30,171,44,246,121,111,100,94,184,215,138,51,248,148,74,128,185,198,32,13,120,16,215,254,190,33,118,63,48,3,244,246,47,169,221,223,221,196,16,164,91,196,73,117,203,12,146,99,47,232,149,195,150,157,250,190,130,238,206,44,124,26,2,141,191,36,226,207,251,3,225,113,93,221,177,186,69,12,177,127,49,164,55,184,245,8,67,204,63,186,223,201,210,31,4,128,147,45,27,171,226,225,126,98,195,198,55,213,145,171,79,155,11,111,183,203,92,184,67,151,10,107,142,233,172],"ic":[[6,60,88,74,149,229,25,39,105,0,39,72,70,194,100,54,92,242,107,221,117,185,82,94,227,46,107,43,202,61,159,116,40,199,220,31,197,255,195,55,95,179,58,71,0,187,251,204,154,64,51,40,107,174,147,162,175,54,20,195,178,243,112,101],[42,75,229,162,159,115,115,44,147,90,192,145,179,30,214,68,125,183,79,195,218,65,226,144,128,3,36,43,21,165,230,95,24,160,114,125,141,196,8,82,59,160,90,105,121,213,91,216,212,210,63,66,28,31,156,219,88,222,183,53,16,182,217,249],[36,200,190,158,167,206,66,58,187,166,116,44,94,232,116,124,37,80,200,103,53,55,109,6,28,70,208,119,117,30,115,100,4,38,166,131,128,187,110,82,46,14,223,106,151,227,186,103,183,96,144,151,113,230,6,65,78,186,110,47,70,17,148,122],[15,136,118,155,50,188,176,42,46,14,34,108,201,13,230,46,106,143,248,170,86,204,11,175,69,205,206,105,158,234,158,240,27,22,44,132,211,140,127,58,149,82,193,31,97,77,133,42,105,46,168,170,233,165,142,66,179,16,244,10,180,246,91,106]]}"#
            }
            HypersignKYCProofTypes::zkProofOfMembership => {
                r#"{"alpha_1":[45,77,154,167,227,2,217,223,65,116,157,85,7,148,157,5,219,234,51,251,177,108,100,59,34,245,153,162,190,109,242,226,20,190,221,80,60,55,206,176,97,216,236,96,32,159,227,69,206,137,131,10,25,35,3,1,240,118,202,255,0,77,25,38],"beta_2":[9,103,3,47,203,247,118,209,175,201,133,248,136,119,241,130,211,132,128,166,83,242,222,202,169,121,76,188,59,243,6,12,14,24,120,71,173,76,121,131,116,208,214,115,43,245,1,132,125,214,139,192,224,113,36,30,2,19,188,127,193,61,183,171,48,76,251,209,224,138,112,74,153,245,232,71,217,63,140,60,170,253,222,196,107,122,13,55,157,166,154,77,17,35,70,167,23,57,193,177,164,87,168,199,49,49,35,210,77,47,145,146,248,150,183,198,62,234,5,169,213,127,6,84,122,208,206,200],"gamma_2":[25,142,147,147,146,13,72,58,114,96,191,183,49,251,93,37,241,170,73,51,53,169,231,18,151,228,133,183,174,243,18,194,24,0,222,239,18,31,30,118,66,106,0,102,94,92,68,121,103,67,34,212,247,94,218,221,70,222,189,92,217,146,246,237,9,6,137,208,88,95,240,117,236,158,153,173,105,12,51,149,188,75,49,51,112,179,142,243,85,172,218,220,209,34,151,91,18,200,94,165,219,140,109,235,74,171,113,128,141,203,64,143,227,209,231,105,12,67,211,123,76,230,204,1,102,250,125,170],"delta_2":[34,43,174,149,93,210,93,57,253,249,129,153,62,67,75,94,92,79,45,41,182,219,47,56,176,163,168,63,20,155,252,199,14,106,83,198,249,29,171,178,186,130,61,1,21,233,75,11,200,46,141,91,240,92,30,66,88,124,245,201,202,129,41,206,12,201,215,7,205,174,35,45,135,238,85,206,156,128,219,196,229,81,209,67,135,89,141,162,235,168,117,78,152,116,89,30,23,202,7,89,14,97,154,163,103,40,26,163,72,40,84,76,103,157,204,105,15,90,157,237,96,141,150,138,231,102,65,87],"ic":[[12,84,242,107,131,131,6,138,104,25,8,139,7,83,8,176,82,159,188,96,13,166,75,119,83,109,77,209,219,9,232,53,19,212,103,88,88,67,136,231,127,55,186,196,7,190,17,105,62,196,138,203,123,174,71,56,30,47,17,161,168,80,62,134],[35,174,44,150,158,243,172,45,8,198,194,96,207,77,179,99,71,230,205,69,76,126,27,165,210,140,89,92,120,139,218,149,31,150,126,43,206,207,85,237,207,136,9,10,141,225,92,90,201,182,244,158,19,78,85,168,112,164,123,23,45,234,62,146],[43,85,174,153,143,128,223,100,254,237,90,225,76,88,181,158,44,82,250,245,246,164,113,143,137,218,32,6,14,2,45,106,20,48,96,37,142,147,97,17,198,202,209,184,130,38,166,33,108,205,113,67,218,38,130,107,164,246,214,8,176,174,245,145],[36,176,99,135,152,4,67,117,33,20,53,205,138,59,73,34,221,162,202,176,234,173,184,43,196,122,95,199,26,156,32,191,0,59,99,23,132,85,244,27,16,63,177,9,62,51,122,245,94,198,166,113,180,144,145,206,86,151,94,248,227,190,108,208],[1,67,220,111,109,238,8,150,58,52,1,232,129,203,177,68,55,6,87,234,41,242,164,58,169,66,12,16,250,31,249,109,25,49,207,253,250,38,233,25,153,227,143,39,26,57,204,147,78,52,6,83,136,243,26,199,119,34,155,165,81,124,9,227]]}"#
            }
        }
    }
}

#[cw_serde]
#[derive(ToString)]
pub enum HsZkProtocols {
    #[strum(serialize = "groth16")]
    groth16,
}

#[cw_serde]
#[derive(ToString)]
pub enum HsZkProtocolsCurvs {
    #[strum(serialize = "bn128")]
    bn128,
}

#[cw_serde]
pub struct HsZkProof {
    pub pi_a: Vec<u8>,
    pub pi_b: Vec<u8>,
    pub pi_c: Vec<u8>,
    pub protocol: HsZkProtocols,
    pub curve: HsZkProtocolsCurvs,
}

#[cw_serde]
pub struct ZkProof {
    pub proof: HsZkProof,
    pub public_signales: Vec<String>,
    pub proof_type: HypersignKYCProofTypes,
}

#[cw_serde]
pub struct HypersignKYCProof {
    pub credential_id: Option<String>, // verifiable credential id linked with this proof
    pub zk_proof: ZkProof,
}

#[cw_serde]
pub enum ExecMsg {
    Mint {
        hypersign_proof: HypersignKYCProof,
    },
    Init {
        token_code_id: u64,
        label: Option<String>,
    },
}

#[cw_serde]
pub struct ValueResp {
    pub owner_did: String,
}

#[cw_serde]
pub struct SBTcontractAddressResp {
    pub sbt_contract_address: String,
}

pub type CW721OnChainMetadataInstantiateMsg = cw721_metadata_onchain::InstantiateMsg;
